{"ast":null,"code":"var _jsxFileName = \"/Users/brandonwillingham/Desktop/Coding/Project_Flashcards_Qualified_1/src/Layout/DeckInfoComp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, deleteCard } from \"../utils/api\";\nimport CardMapping from \"./CardMapping\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DeckInfoComp() {\n  _s();\n\n  const initialization = {\n    deck: [],\n    cards: [1, 2, 3]\n  };\n  const [deckInfo, setDeckInfo] = useState(initialization); // let cardsMap\n\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    async function loadData() {\n      const response = await readDeck(deckId);\n      console.log(\"in useEffect\", response);\n      setDeckInfo(response);\n    }\n\n    loadData();\n  }, [deckId]);\n  console.log(deckInfo.cards); // const cardsMap = deckInfo.cards.map((card,index)=>{\n  //     function handleEdit(){\n  //         history.push(`/decks/${card.deckId}/cards/${card.id}`)\n  //     }\n  //     function handleDelete(){\n  //         if(window.confirm(\"Are you sure?\")){\n  //             deleteCard(card.id)\n  //             window.location.reload(true)\n  //         }\n  //     }\n  //     return(\n  //         <div key = {index}>\n  //             <div>\n  //                 Front: {card.front}\n  //             </div>\n  //             <div>\n  //                 Back: {card.back}\n  //             </div>\n  //             <div>\n  //                 <button onClick={handleEdit}>\n  //                     Edit\n  //                 </button>\n  //                 <button onClick={handleDelete}>\n  //                     delete\n  //                 </button>\n  //             </div>\n  //             <hr/>\n  //         </div>\n  //     )\n  // })\n\n  return deckInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: deckInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: deckInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Study\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: deckInfo.cards.map((card, index) => {\n            function handleEdit() {\n              history.push(`/decks/${card.deckId}/cards/${card.id}`);\n            }\n\n            function handleDelete() {\n              if (window.confirm(\"Are you sure?\")) {\n                deleteCard(card.id);\n                window.location.reload(true);\n              }\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Front: \", card.front]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Back: \", card.back]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleEdit,\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleDelete,\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 9\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 5\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckInfoComp, \"qVE9e+oXmREHgcGKvCzk8T4o7NE=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = DeckInfoComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckInfoComp\");","map":{"version":3,"sources":["/Users/brandonwillingham/Desktop/Coding/Project_Flashcards_Qualified_1/src/Layout/DeckInfoComp.js"],"names":["React","useEffect","useState","useParams","useHistory","readDeck","deleteCard","CardMapping","DeckInfoComp","initialization","deck","cards","deckInfo","setDeckInfo","deckId","history","loadData","response","console","log","name","description","map","card","index","handleEdit","push","id","handleDelete","window","confirm","location","reload","front","back"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { useParams,useHistory } from \"react-router-dom\";\nimport { readDeck, deleteCard } from \"../utils/api\";\nimport CardMapping from \"./CardMapping\";\n\nexport default function DeckInfoComp (){\n    const initialization = {\n        deck: [],\n        cards: [1,2,3],\n    }\n    const [deckInfo,setDeckInfo] = useState(initialization)\n\n    // let cardsMap\n\n    const {deckId} = useParams()\n    const history = useHistory()\n\n    useEffect(()=>{\n\n        async function loadData(){\n            const response = await readDeck(deckId)\n            console.log(\"in useEffect\",response)\n            setDeckInfo(response)\n            \n        }\n\n        loadData()\n        \n    },[deckId])\n\n    console.log(deckInfo.cards)\n    // const cardsMap = deckInfo.cards.map((card,index)=>{\n\n    //     function handleEdit(){\n    //         history.push(`/decks/${card.deckId}/cards/${card.id}`)\n    //     }\n\n    //     function handleDelete(){\n    //         if(window.confirm(\"Are you sure?\")){\n    //             deleteCard(card.id)\n    //             window.location.reload(true)\n    //         }\n\n    //     }\n\n    //     return(\n    //         <div key = {index}>\n    //             <div>\n    //                 Front: {card.front}\n    //             </div>\n    //             <div>\n    //                 Back: {card.back}\n    //             </div>\n    //             <div>\n    //                 <button onClick={handleEdit}>\n    //                     Edit\n    //                 </button>\n    //                 <button onClick={handleDelete}>\n    //                     delete\n    //                 </button>\n    //             </div>\n    //             <hr/>\n    //         </div>\n    //     )\n\n    // })\n\n    return (\n        deckInfo ? (\n        \n        <div>\n            <div>\n                <h3>\n                    {deckInfo.name}\n                </h3>\n\n                <div>\n                    {deckInfo.description}\n                </div>\n\n                <div>\n\n                    <button>\n                        Edit\n                    </button>\n\n                    <button>\n                        Study\n                    </button>\n\n                    <button>\n                        Add Cards\n                    </button>\n\n                    <button>\n                        Delete\n                    </button>\n\n                </div>\n\n                <div>\n                    <h2>\n                        Cards\n                    </h2>\n\n                    <div>\n                        {deckInfo.cards.map((card,index)=>{\n\nfunction handleEdit(){\n    history.push(`/decks/${card.deckId}/cards/${card.id}`)\n}\n\nfunction handleDelete(){\n    if(window.confirm(\"Are you sure?\")){\n        deleteCard(card.id)\n        window.location.reload(true)\n    }\n\n}\n\nreturn(\n    <div key = {index}>\n        <div>\n            Front: {card.front}\n        </div>\n        <div>\n            Back: {card.back}\n        </div>\n        <div>\n            <button onClick={handleEdit}>\n                Edit\n            </button>\n            <button onClick={handleDelete}>\n                delete\n            </button>\n        </div>\n        <hr/>\n    </div>\n)\n\n})}\n                    {/* <CardMapping deckInfo = {deckInfo}/> */}\n                    </div>\n                </div>\n            </div>\n\n        </div>) : (\n        <div>\n            Loading...\n        </div>\n        )\n    )\n}"]},"metadata":{},"sourceType":"module"}